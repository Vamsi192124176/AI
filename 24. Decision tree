

import numpy as np 

import pandas as pd 

from sklearn.metrics import confusion_matrix 

from sklearn.model_selection import train_test_split 

from sklearn.tree import DecisionTreeClassifier 

from sklearn.metrics import accuracy_score 

from sklearn.metrics import classification_report 

def importdata(): 

    balance_data = pd.read_csv(

'databases/balance-scale/balance-scale.data', 

    sep= ',', header = None) 

      

    # Printing the dataswet shape 

    print ("Dataset Length: ", len(balance_data)) 

    print ("Dataset Shape: ", balance_data.shape) 


    print ("Dataset: ",balance_data.head()) 

    return balance_data 

def splitdataset(balance_data): 

  

    # Separating the target variable 

    X = balance_data.values[:, 1:5] 

    Y = balance_data.value, 0.

    X_train, X_test, y_train, y_test = train_test_split(  

    X, Y, test_size = 0.3, random_state = 100) 

      

    return X, Y, X_train, X_test, y_train, y_test 

      
# Function to perform training with giniIndex. 

def train_using_gini(X_train, X_test, y_train): 

    clf_gini = DecisionTreeClassifier(criterion = "gini", 

            random_state = 100,max_depth=3, min_samples_leaf=5) 

    clf_gini.fit(X_train, y_train) 

    return clf_gini 

      
# Function to perform training with entropy. 

def tarin_using_entropy(X_train, X_test, y_train): 

  

    # Decision tree with entropy 

    clf_entropy = DecisionTreeClassifier( 

            criterion = "entropy", random_state = 100, 

            max_depth = 3, min_samples_leaf = 5) 

  

    # Performing training 

    clf_entropy.fit(X_train, y_train) 

    return clf_entropy
